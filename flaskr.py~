import sqlite3
import logging
import json
from flask import Flask,request,session,g,redirect,url_for, abort, render_template, flash
from contextlib import closing
from contextlib import contextmanager

#configuration
DATABASE = '/tmp/flaskr.db'
DEBUG = True
SECRET_KEY = 'development key'
USERNAME = '1'
PASSWORD = '2'

#create little application
logging.basicConfig(filename='/home/gussa/Desktop/flaskr/www/demoapp/example.log',level = logging.DEBUG)
app = Flask(__name__)
app.config.from_object(__name__)

def  connect_db():
	return sqlite3.connect(app.config['DATABASE'])


def init_db():
	with closing(connect_db()) as db:
		with app.open_resource('schema.sql',mode='r') as f:
			db.cursor().executescript(f.read())
		db.commit()


@contextmanager
def captured_templates(app):
	recorded = []
	def record(sender, template, context, **extra):
		recorded.append((template, context))
	template_rendered.connect(record,app)
	try:
		yield recorded
	finally:
		template_rendered.disconnect(record, app)
		

@app.before_request
def before_request():
	g.db = connect_db()

@app.teardown_request
def teardown_request(exception):
	db = getattr(g,'db',None)
	if db is not None:
		db.close()
	g.db.close()

@app.route('/')
def show_entries():
	cur = g.db.execute('select title,text from entries order by id desc')
	entries = [dict(title = row[0],text = row[1]) for row in cur.fetchall()]
	return render_template('show_entries.html',entries=entries)

@app.route('/add',methods = ['POST'])
def add_entry():
	if not session.get('logged_in'):
		abort(401)
	g.db.execute('insert into entries (title,text) values (?,?)',
		[request.form['title'],request.form['text']])
	g.db.commit()
	flash('New entry was successfully posted')
	return redirect(url_for('show_entries'))

@app.route('/login',methods = ['GET','POST'])
def login():
	error = None
	if request.method == 'POST':
		if request.form['username'] != app.config['USERNAME']:
			error = 'Invalid username'
		elif request.form['password'] != app.config['PASSWORD']:
			error = 'Invalid password'
		else:
			session['logged_in'] = True
			flash('You were logged in ')
			return redirect(url_for('show_entries'))
	return render_template('login.html',error=error)

@app.route('/logout')
def logout():
	session.pop('logged_in',None)
	flash('You were logged out')
	return redirect(url_for('show_entries'))

@app.route('/MonitorWeb/html5/topo/map/<string:fileName>')
def response_to_DownloadFloorPlan(fileName):
	if request.method == 'GET' :
		logging.debug('call to 1.png')
		logging.debug('The filename is {}'.format(fileName))	
		return redirect(url_for('static',filename = fileName))

#/MonitorWeb/HotSpot/HTML5/HotSpotAction.action
@app.route('test.action')
def response_to_basePoints():
	#logging.debug('action={} and {}'.format(request.args['action'],request.args['areaId']))
	if request.method == 'GET':
		action_name = request.args.get('action')
		if action_name == 'test':
			floor_number = request.args.get('areaId', 1 ,type = int)
			row1 = {'alias':'1p11','areaId':1,'hasCollected':True,'id':1,'x':30,'y':30}
			row2 = {'alias':'1p12','areaId':1,'hasCollected':True,'id':2,'x':60,'y':60}
			row3 = {'alias':'1p13','areaId':1,'hasCollected':True,'id':3,'x':90,'y':90}
			row4 = {'alias':'1p14','areaId':1,'hasCollected':True,'id':4,'x':30,'y':30}
			row5 = {'alias':'1p15','areaId':1,'hasCollected':True,'id':5,'x':60,'y':60}
			row6 = {'alias':'1p16','areaId':1,'hasCollected':True,'id':6,'x':90,'y':90}
			row7 = {'alias':'1p17','areaId':1,'hasCollected':True,'id':7,'x':30,'y':30}
			row8 = {'alias':'1p18','areaId':1,'hasCollected':True,'id':8,'x':60,'y':60}
			list1 = [row1,row2,row3,row4,row5,row6,row7,row8]
			encode_json = json.dumps(list1)
			logging.debug('return to client: {}'.format(encode_json))
			return encode_json
		else:
			method_name = request.args.get('method')
			row1 = {'areaId':1 , 'areaName':'Floor 1', 'picName':'1.png'}
			row2 = {'areaId':2 , 'areaName':'Floor 2', 'picName':'2.png'}
			row3 = {'areaId':3 , 'areaName':'Floor 3', 'picName':'3.png'}
			row4 = {'areaId':4 , 'areaName':'Floor 4', 'picName':'4.png'}
			list1 = [row1,row2,row3,row4]
			encode_json = json.dumps(list1)
			logging.debug('return to client : {}'.format(encode_json))
			return encode_json

@app.route('/MonitorWeb/wl/WLFingerSetServlet')
def response_to_dot_operation():
	logging.debug('we get the info :',request.form.get('wlfingerConfig','we get no wlfingerConfig')) ;
	logging.debug('we get the info :',request.form.get('resultLocation','we get no resultLocation')) ;
	logging.debug('we get the info :',request.form.get('wlfingerFinishResult','we get no wlfingerFinishResult')) ;
	
	pass
			

if __name__ == '__main__':
	app.run()
